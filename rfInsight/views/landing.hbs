<!--Landing page-->
<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8" />
    <meta charset="UTF-8" />
    <link rel="stylesheet" href="/css/app.css" />
    <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="../resources/js/index.js"></script>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU"
          crossorigin="anonymous" />
    <title>Redfish Insight | Home</title>
</head>
<body>
    <div id="menuContainer"></div>
    <div>
        <div class="header">
            <i class="fas fa-bars menuIcon"></i>
        </div>
        <h1 class="text">{{ pageTitle }}</h1>
        <div class="separator"></div>
    </div>
    <br />
    <br />
    <div id="methods" style="width: 33%; float: left; display: inline-block;">
        <div id="ip-dash" style="margin-left: 20%; width: 300px;">
            <h2>1. Enter a Host</h2>
            <input id="ip" placeholder="http(s)://{host}:{port}" />
            <br />
            <br />
            <button id="continue">Step 2</button>
        </div>
        <br />
        <br />
        <br />
        <br />
        <div id="subs" style="margin-left: 20%; visibility: hidden;">
            <h2>2. Select Retrieval Method</h2>
            <label for="polling">Polling (Default)</label>
            <input id="polling" name="type" type="radio" value="poll" checked="checked"/>
            <br />
            <label for="subscription">Subscription</label>
            <input id="subscription" name="type" type="radio" value="sub" />
            <br />
            <label for="SSE">SSE Streaming</label>
            <input id="SSE" name="type" type="radio" value="sse" />
            <br />
            <br />
            <button id="continue_2">Step 3</button>
        </div>
    </div>
    <div id="metrics" style="width: 33%; display: inline-block">
        <div style="margin-left: 15%; width: 400px; visibility: hidden" id="avail">
            <h2 style="text-align: center;">3. Select From Available Metrics</h2>
            <div class="list-div" style="visibility: hidden;">
                <ul class="list">
                </ul>
            </div>
        </div>
    </div>
    <div id="selectedParent" style="float: right; width: 33%; display: inline-block;">
        <div class="dashboard">
            <h2 style="text-align: center; visibility: hidden;" id="select">Preselected Metrics</h2>
        </div>
        <div class="dashboard">
            <div id="selectedMetrics" style="margin-left: 100px;">
                <ul class="selected-parent"></ul>
            </div>
        </div>
        <div id="buttons" style="visibility: hidden; text-align: center;">
            <input type="button" value="Start" id="run" />
            <input type="button" value="View Graphs" id="view" />
            <input type="button" value="Save Config" id="save" />
        </div>
    </div>
</body>
<script>
   var selected = [];
   var size = 0;
   var preselected = [];
   $('#view').prop('disabled', true);

    var selected = [];
    var sub_type = [];
    let selectedMetricsToDisplay = [];
    var newData = "";
    $('#view').prop('disabled', true);
    $('.metrics-indiv').hide();

    $(document).ready(function(e){

        var init_host = "{{ host }}";
       if(init_host !== ""){
         console.log("host set");
         $('#ip');
         $('#subs').css('visibility', 'visible');
         $('#run').prop('disabled', false);
         $('.list-div').css('visibility', 'visible');
         $('#select').css('visibility', 'visible');
         $('#avail').css('visibility', 'visible');
         $('#buttons').css('visibility', 'visible');
         get_existing();
       } else{
           console.log("host not set");
        }
    });

    //disable run until after hostname
   $('#run').prop('disabled', true);

   $('#ip').on('keyup', function(e){
       e.preventDefault();
       if(e.which === 13) {
           $('#subs').css('visibility', 'visible');
       }
   });

   $('#continue').on('click', function(e){
       e.preventDefault();
       $('#subs').css('visibility', 'visible');
   });

   $('#continue_2').on('click', function(e){
       $('#run').prop('disabled', false);
       $('.list-div').css('visibility', 'visible');
       $('#select').css('visibility', 'visible');
       $('#avail').css('visibility', 'visible');
       $('#buttons').css('visibility', 'visible');
       get_existing();
       getDefs();
   });

    // Open Menu on CLick
    var menuOpened = false;
    let onMenuClick = () => {
      menuOpened = !menuOpened;
      let menuId = menuOpened ? "menuSurface" : "menuSurfaceClosing";
      let overlayId = menuOpened ? "overlay" : "overlayClosing";
      let menuHtml = 
         "<div id='" + menuId + "'>" +
            "<h1 class='menuTitle'>Menu</h1>" +
            "<div class='menuSeparator'></div>" +
            "<a href='/' class='menuLink selectedLink'>Metric Selections</a>" +
            "<div class='menuSeparator'></div>" +
            "<a href='/graphs' class='menuLink'>Panel Display</a>" +
            "<div class='menuSeparator'></div>" +
            "<a href='/datagenerator' class='menuLink'>Data Generator</a>" +
            "<div class='menuSeparator'></div>" +
         "</div>" + 
         "<div id='"+ overlayId +"' onclick='onMenuClick()'>"+
         "</div>";
      document.getElementById('menuContainer').innerHTML = menuHtml;

      if (!menuOpened) {
         setTimeout(() => {
            document.getElementById('menuContainer').innerHTML = "";
         }, 500)
      }
   };

   $(".menuIcon").on("click", onMenuClick);

    // Change the colors on the selection list
    $('.metrics-defs').on('click', function(){

        var metric = $(this).attr('value');
        // console.log(metric);
        if($(this).attr('data-opened') === 'closed') {

            $(this).attr('data-opened', 'opened');
            $(this).next().show();

            //AJAX get available metrics
            $.ajax({
                context: this,
                url: "./api/metrics/" + metric,
                method: "GET",
                success: function (response) {
                    // console.log(response['MetricProperties']);
                    newData = response['MetricProperties'];
                    for(var i = 0; i < newData.length; i++){
                        // console.log(newData[i].substr(newData[i].lastIndexOf('/') + 1, newData[i].length).toString());
                        if( $.inArray(newData[i].substr(newData[i].lastIndexOf('/') + 1, newData[i].length).toString(), preselected) === -1 ){
                            console.log("false");
                            // $(this).next().append('<li class="data" id="'+newData[i].substr(60, newData[i].length)+'" data-selected="no" style="color: red;">' + newData[i].substr(60, newData[i].length) + '</li>');
                            $(this).next().append('<li class="data" id="'+newData[i].substr(newData[i].lastIndexOf('/') + 1, newData[i].length)+'" data-selected="no" style="color: red;">' + newData[i].substr(newData[i].lastIndexOf('/') + 1, newData[i].length) + '</li>');
                        } else{
                            console.log("true");
                            // $(this).next().append('<li class="data" id="'+newData[i].substr(60, newData[i].length)+'" data-selected="yes" style="color: green;">' + newData[i].substr(60, newData[i].length) + '</li>');
                            $(this).next().append('<li class="data" id="'+newData[i].substr(newData[i].lastIndexOf('/') + 1, newData[i].length)+'" data-selected="yes" style="color: green;">' + newData[i].substr(newData[i].lastIndexOf('/') + 1, newData[i].length) + '</li>');
                        }
                    }
                },
                error: function (error) {
                    alert("Error getting available metrics!");
                    console.log(error);
                }
            });

        } else{
            $(this).attr('data-opened', 'closed');
            $(this).next().hide();
        }
    });

    // After select of individual metrics
    $('.metrics-indiv').on('click', '.data', function(e){

        e.preventDefault();
        var parent = $(this).parent().attr('data-parent');
        var individual = $(this).text();

        if($(this).attr('data-selected') === 'no'){
            $(this).attr('data-selected', 'yes');
            $(this).css('color', 'green');
            selectedMetricsToDisplay.push($(this).text());

            // if the parent has not already been selected, create parent node and append metric
            if(!(parent in selected)){
                selected[parent] = [];
                if(!(individual in selected[parent])){
                    selected[parent].push(individual);
                    size++;
                }
            }
            // If the parent has been selected, find parent node then append metric
            else{
                if(!(individual in selected[parent])){
                    selected[parent].push(individual);
                }
            }
            // console.log(selected);
            updateDashboardList();

        } else{
            $(this).attr('data-selected', 'no');
            $(this).css('color', 'red');
            selected[parent].splice(selected[parent].indexOf(individual), 1);
            // console.log(selected);
            if(selected[parent].length == 0){
                // console.log(selected);
                // selected.splice(parent, parent.length);
                delete selected[parent];
                size--;
            }
            updateDashboardList();
        }
        $('#select').text("Selected Metrics");
    });

    // Ready to send top back end an move on to graphs page
    $('#run').on('click', function(e){
        e.preventDefault();

        if($('#ip').val())

        // if(valid) {
            sub_type["type"] = $('input[name=type]:checked').val();

            $('.metrics-list').each(function () {
                if ($(this).attr('sel') === "Not Enabled") {
                    $(this).css('color', 'green');

                    var text = $(this).attr('value');
                    var newText = text + " (Running)";

                    $(this).text(newText);
                }
            });

            $('#view').prop('disabled', false);

            var s = JSON.stringify(sub_type);
            console.log(sub_type['type']);

            // Build Metrics
            var p = new Object();
            for (var key in selected) {
                p[key] = selected[key];
            }

            // POST ip
            var payload = [];
            var ip = $('#ip').val();
            payload['host'] = ip;

            $.ajax({
                url: "./api/redfish_host",
                method: "POST",
                data: {'host': ip},
                async: false,
                success: function (response) {
                    // console.log(response);
                },
                error: function (error) {
                    alert('Could not post ip!');
                }
            });

            // POST METRICS
            $.ajax({
                type: "POST",
                url: "api/metrics",
                data: {payload: JSON.stringify(p)},
                async: false,
                success: function (response) {
                    console.log(response);
                },
                error: function (error) {
                    alert("Could not post selected metrics.");
                    console.log(error);
                }
            });

            // POST SUB TYPE
            $.ajax({
                type: "POST",
                url: "api/sub_type",
                data: {"type": sub_type['type']},
                async: false,
                success: function (response) {
                    console.log(response);
                },
                error: function (error) {
                    alert("Could not post subscription type.");
                    console.log(error);
                }
            });
        // }
        // else{
        //     alert('Destination IP invalid!');
        // }

        $('#run').val('Running');
        $('#run').prop('disabled', true);
    });

    // Go to Graphs Page
    $('#view').on('click', function(e){
        e.preventDefault();

        window.location.replace("/graphs");
            });

    //AJAX for saving config
   $('#save').on('click', function(e){
       var s = JSON.stringify(sub_type);
       console.log(sub_type['type']);

       // Build Metrics
       var p = new Object();
       for (var key in selected) {
           p[key] = selected[key];
       }

       // POST ip
       var payload = [];
       var ip = $('#ip').val();
       payload['host'] = ip;
       payload['sub'] = s;
       payload['metrics'] = p;

       data = JSON.stringify(payload);

       e.preventDefault();
       $.ajax({
           method: "POST",
           url: 'api/save',
           data: {data: data},
           success:  function(response){
                console.log('saved');
           },
           error: function(error){
               alert("Error saving existing config!");
               console.log(error);
           }
       });
   });

    // AJAX for current config
    function get_existing() {
        $.ajax({
            method: "GET",
            url: 'api/config',
            success: function (response) {

                // For each response selection
                for (var i = 0; i < response['selections'].length; i++) {

                    // Add parent node (from)
                    $('.selected-parent').append('<li>' + response['selections'][i]['from'] + '</li>');
                    $('.selected-parent').append('<ul class="selected_' + response['selections'][i]['from'] + '"></ul>');

                    // Make each parent node an array
                    selected[response['selections'][i]['from']] = [];
                    size++;

                    // For each metric (metrics)
                    for (var j = 0; j < response['selections'][i]['metrics'].length; j++) {

                        // Append metrics to the parent UL in the html
                        $('.selected_' + response['selections'][i]['from'] + '').append('<li>' + response['selections'][i]['metrics'][j] + '</li>');
                        preselected.push(response['selections'][i]['metrics'][j]);

                        // Add to selected array
                        selected[response['selections'][i]['from']][j] = response['selections'][i]['metrics'][j];
                    }
                }
                // console.log(preselected);
                // console.log(selected);
            },
            error: function (error) {
                alert("Error getting existing config!");
                console.log(error);
            }
        });
    }


   function getDefs(){

        //Get host value
       var host = $('#ip').val();

       $.ajax({
           method: "GET",
           url: '/getDefs/' + encodeURIComponent(encodeURIComponent(host)),
           success:  function(response){
                console.log(response);
               // For each response selection
               for(var i = 0; i < response.length; i++){
                   $('.list').append("<li class='metrics-defs' value='"+response[i]+"' data-opened='closed'>"+response[i]+" </li><ul class='metrics-indiv' data-parent='"+response[i]+"'></ul>");

               }
           },
           error: function(error){
               alert("Error getting definitions! Check your host!");
               console.log(error);
           }
       });
   }

    // Update dashboard on select of individual metrics
    let updateDashboardList = () => {
        $('.selected-parent').empty();
        // console.log(parents);
        for(var key in selected){
            // console.log(key);
            $('.selected-parent').append('<li>'+key+'</li>');
            $('.selected-parent').append('<ul class="selected_' +key+'"></ul>');

            for(var k in selected[key]){
                // console.log(k);
                $('.selected_' + key + '').append('<li>'+selected[key][k]+'</li>');
            }
        }
    }
</script>
</html>
